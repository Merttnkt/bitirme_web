{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mertt\\\\OneDrive\\\\Desktop\\\\proje\\\\uniweb\\\\src\\\\components\\\\SimpleLineChart.tsx\";\nimport React from 'react';\n\n// Basit bir SVG çizgi grafik komponenti\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleLineChart = ({\n  data,\n  labels = [],\n  height = 100,\n  color = '#1976d2'\n}) => {\n  if (data.length < 2) return null;\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const width = 260;\n  const stepX = width / (data.length - 1);\n  const stepY = max === min ? 1 : max - min;\n  const points = data.map((val, i) => {\n    const x = i * stepX;\n    const y = height - (val - min) / stepY * (height - 20) - 10;\n    return `${x},${y}`;\n  }).join(' ');\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    style: {\n      background: '#f5f5f5',\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"polyline\", {\n      fill: \"none\",\n      stroke: color,\n      strokeWidth: 3,\n      points: points\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), data.map((val, i) => {\n      const x = i * stepX;\n      const y = height - (val - min) / stepY * (height - 20) - 10;\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: 4,\n        fill: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }, this);\n    }), labels.length === data.length && labels.map((label, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * stepX,\n      y: height - 2,\n      fontSize: \"10\",\n      textAnchor: \"middle\",\n      fill: \"#888\",\n      children: label\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = SimpleLineChart;\nexport default SimpleLineChart;\nvar _c;\n$RefreshReg$(_c, \"SimpleLineChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SimpleLineChart","data","labels","height","color","length","max","Math","min","width","stepX","stepY","points","map","val","i","x","y","join","style","background","borderRadius","children","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","label","fontSize","textAnchor","_c","$RefreshReg$"],"sources":["C:/Users/mertt/OneDrive/Desktop/proje/uniweb/src/components/SimpleLineChart.tsx"],"sourcesContent":["import React from 'react';\n\n// Basit bir SVG çizgi grafik komponenti\ninterface SimpleLineChartProps {\n  data: number[];\n  labels?: string[];\n  height?: number;\n  color?: string;\n}\n\nconst SimpleLineChart: React.FC<SimpleLineChartProps> = ({ data, labels = [], height = 100, color = '#1976d2' }) => {\n  if (data.length < 2) return null;\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const width = 260;\n  const stepX = width / (data.length - 1);\n  const stepY = max === min ? 1 : (max - min);\n  const points = data.map((val, i) => {\n    const x = i * stepX;\n    const y = height - ((val - min) / stepY) * (height - 20) - 10;\n    return `${x},${y}`;\n  }).join(' ');\n  return (\n    <svg width={width} height={height} style={{ background: '#f5f5f5', borderRadius: 8 }}>\n      <polyline\n        fill=\"none\"\n        stroke={color}\n        strokeWidth={3}\n        points={points}\n      />\n      {data.map((val, i) => {\n        const x = i * stepX;\n        const y = height - ((val - min) / stepY) * (height - 20) - 10;\n        return <circle key={i} cx={x} cy={y} r={4} fill={color} />;\n      })}\n      {labels.length === data.length && labels.map((label, i) => (\n        <text key={i} x={i * stepX} y={height - 2} fontSize=\"10\" textAnchor=\"middle\" fill=\"#888\">{label}</text>\n      ))}\n    </svg>\n  );\n};\n\nexport default SimpleLineChart;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,eAA+C,GAAGA,CAAC;EAAEC,IAAI;EAAEC,MAAM,GAAG,EAAE;EAAEC,MAAM,GAAG,GAAG;EAAEC,KAAK,GAAG;AAAU,CAAC,KAAK;EAClH,IAAIH,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE,OAAO,IAAI;EAChC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGL,IAAI,CAAC;EAC7B,MAAMO,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,GAAGP,IAAI,CAAC;EAC7B,MAAMQ,KAAK,GAAG,GAAG;EACjB,MAAMC,KAAK,GAAGD,KAAK,IAAIR,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;EACvC,MAAMM,KAAK,GAAGL,GAAG,KAAKE,GAAG,GAAG,CAAC,GAAIF,GAAG,GAAGE,GAAI;EAC3C,MAAMI,MAAM,GAAGX,IAAI,CAACY,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IAClC,MAAMC,CAAC,GAAGD,CAAC,GAAGL,KAAK;IACnB,MAAMO,CAAC,GAAGd,MAAM,GAAI,CAACW,GAAG,GAAGN,GAAG,IAAIG,KAAK,IAAKR,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;IAC7D,OAAO,GAAGa,CAAC,IAAIC,CAAC,EAAE;EACpB,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACZ,oBACEnB,OAAA;IAAKU,KAAK,EAAEA,KAAM;IAACN,MAAM,EAAEA,MAAO;IAACgB,KAAK,EAAE;MAAEC,UAAU,EAAE,SAAS;MAAEC,YAAY,EAAE;IAAE,CAAE;IAAAC,QAAA,gBACnFvB,OAAA;MACEwB,IAAI,EAAC,MAAM;MACXC,MAAM,EAAEpB,KAAM;MACdqB,WAAW,EAAE,CAAE;MACfb,MAAM,EAAEA;IAAO;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,EACD5B,IAAI,CAACY,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MACpB,MAAMC,CAAC,GAAGD,CAAC,GAAGL,KAAK;MACnB,MAAMO,CAAC,GAAGd,MAAM,GAAI,CAACW,GAAG,GAAGN,GAAG,IAAIG,KAAK,IAAKR,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;MAC7D,oBAAOJ,OAAA;QAAgB+B,EAAE,EAAEd,CAAE;QAACe,EAAE,EAAEd,CAAE;QAACe,CAAC,EAAE,CAAE;QAACT,IAAI,EAAEnB;MAAM,GAAnCW,CAAC;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoC,CAAC;IAC5D,CAAC,CAAC,EACD3B,MAAM,CAACG,MAAM,KAAKJ,IAAI,CAACI,MAAM,IAAIH,MAAM,CAACW,GAAG,CAAC,CAACoB,KAAK,EAAElB,CAAC,kBACpDhB,OAAA;MAAciB,CAAC,EAAED,CAAC,GAAGL,KAAM;MAACO,CAAC,EAAEd,MAAM,GAAG,CAAE;MAAC+B,QAAQ,EAAC,IAAI;MAACC,UAAU,EAAC,QAAQ;MAACZ,IAAI,EAAC,MAAM;MAAAD,QAAA,EAAEW;IAAK,GAApFlB,CAAC;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA0F,CACvG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACO,EAAA,GA9BIpC,eAA+C;AAgCrD,eAAeA,eAAe;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}